apply plugin: 'com.android.library'
apply plugin: 'jacoco'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 28
    buildToolsVersion '28.0.3'

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 28
        versionCode 6
        versionName "0.6.2"
        setProperty("archivesBaseName", "LiquidCore")
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-std=c++11 -fexceptions"
                abiFilters "x86", "armeabi-v7a", "x86_64", "arm64-v8a"
                arguments "-DANDROID_CPP_FEATURES=rtti exceptions", "-DANDROID_STL=c++_static"
            }
        }
        sourceSets {
            main {
                jni.srcDirs = []
                release.jniLibs.srcDirs = ['../deps/node-8.9.3/prebuilt/32bit/nosymbols',
                                           '../deps/node-8.9.3/prebuilt/64bit/nosymbols'
                ]
                debug.jniLibs.srcDirs = ['../deps/node-8.9.3/prebuilt/32bit/symbols',
                                         '../deps/node-8.9.3/prebuilt/64bit/symbols'
                ]
            }
        }
    }
    packagingOptions{
        doNotStrip "**/*/libnode.so"
    }
    buildTypes {
        debug {
            testCoverageEnabled = false
            minifyEnabled false
        }
        release {
            minifyEnabled false
            useProguard false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    splits {
        abi {
            enable true
            reset()
            include 'x86', 'armeabi-v7a', 'x86_64', 'arm64-v8a'
            universalApk true
        }
    }
    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    debugImplementation 'junit:junit:4.12'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    androidTestImplementation 'com.android.support:support-annotations:28.0.0'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test:rules:1.0.2'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
}

// build a jar with source files
task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier = 'sources'
}

task javadoc(type: Javadoc) {
    failOnError  false
    source = android.sourceSets.main.java.sourceFiles
    configurations.implementation.setCanBeResolved(true)
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator)) +
            configurations.implementation
    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            owner.classpath += variant.javaCompileProvider.get().classpath
        }
    }
}

// build a jar with javadoc
task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}

task copyHeadersToAARRelease(type: Zip) {
    baseName = 'LiquidCore-release'
    extension = 'aar.in'
    destinationDir = file('build/outputs/aar')
    def aarNameO = "build/outputs/aar/LiquidCore-release.aar"

    from zipTree(aarNameO)
    from("../deps/node-8.9.3/deps/v8/include") {
        into('include/v8')
        include ('**/*.h')
    }
    from("../deps/node-8.9.3/deps/uv/include") {
        into('include/uv')
        include ('**/*.h')
    }
    from("../deps/node-8.9.3/deps/cares/include") {
        into('include/cares')
        include ('**/*.h')
    }
    from("../deps/node-8.9.3/deps/http_parser") {
        into('include/http_parser')
        include ('**/*.h')
    }
    from("../deps/node-8.9.3/deps/nghttp2") {
        into('include/nghttp2')
        include ('**/*.h')
    }
    from("../deps/node-8.9.3/deps/openssl/openssl/include") {
        into('include/openssl')
        include ('**/*.h')
    }
    from("../deps/node-8.9.3/src") {
        into('include/node')
        include('*.h')
    }
    from("../deps/JavaScriptCore/include/JavaScriptCore") {
        into('include/JavaScriptCore')
        include('*.h')
    }
    from("../LiquidCoreCommon/include") {
        into('include')
        include('*.h')
    }
}
task removeOldAARRelease(type: Delete) {
    delete file('build/outputs/aar/LiquidCore-release.aar.in')
}
task renameAARRelease (type: Copy) {
    from ('build/outputs/aar/')
    include 'LiquidCore-release.aar.in'
    destinationDir file('build/outputs/aar/')
    rename "LiquidCore-release.aar.in", "LiquidCore-release.aar"
}

afterEvaluate {
    publishing {
        publications {
            // Creates a Maven publication called "release".
            release(MavenPublication) {
                from components.release
                groupId = 'com.github.jitpack'
                artifactId = 'android-example'
                version = '1.0'
            }
        }
    }
    if (project.hasProperty("bundleReleaseAar")) {
        bundleReleaseAar.finalizedBy copyHeadersToAARRelease
        copyHeadersToAARRelease.finalizedBy renameAARRelease
        renameAARRelease.finalizedBy removeOldAARRelease
    }
}

apply plugin: 'com.github.dcendents.android-maven'

group='com.github.liquidplayer'